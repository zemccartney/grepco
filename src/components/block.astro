---
import type { HTMLTag, Polymorphic } from "astro/types";
import type { ClassValue } from "clsx";

type Props<Tag extends HTMLTag> = Polymorphic<{
    as: Tag;
    class?: ClassValue;
    customLayout?: boolean;
    externalHeader?: boolean;
}>;

const {
    as = "section",
    class: className,
    customLayout = false,
    externalHeader = false,
    ...rest
} = Astro.props;

const Tag = as;
---

<style>
    .GC_Block {
        border-radius: calc(var(--spacing-half-px));

        > header:not(:empty) {
            padding: var(--spacing-three-rem) var(--spacing-two-rem);
            padding-bottom: var(--spacing-one-rem);
        }

        > div {
            padding: var(--spacing-two-rem);
        }

        /* body segments might be nested; see about for more complicated example (2 column block) */
        .block-segment {
            /*
                Meant to cap line lengths at readable number of characters; note, though, that space occupied by text is 35em - x-padding
                Ended up achieving good line length and helped keep blocks sized consistently, but a bit mismatched with intention, should
                figure out how to do better here
            */
            max-width: 35em;
        }

        &[data-variant="metal"] {
            color: var(--color-gray-200);
            background-color: var(--color-gray-900);
        }
    }
</style>

<Tag
    class:list={["GC_Block", className]}
    {...rest}
>
    {
        !externalHeader && (
            <header>
                <slot name="header" />
            </header>
        )
    }
    <div class:list={{ "block-segment": !customLayout }}>
        <slot />
    </div>
</Tag>
